package com.accemy.SampalMVP.data.db.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "options".
*/
public class OptionDao extends AbstractDao<Option, Long> {

    public static final String TABLENAME = "options";

    /**
     * Properties of entity Option.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OptionText = new Property(1, String.class, "optionText", false, "option_text");
        public final static Property QuestionId = new Property(2, Long.class, "questionId", false, "question_id");
        public final static Property IsCorrect = new Property(3, boolean.class, "isCorrect", false, "is_correct");
        public final static Property CreatedAt = new Property(4, String.class, "createdAt", false, "created_at");
        public final static Property UpdatedAt = new Property(5, String.class, "updatedAt", false, "updated_at");
    }

    private Query<Option> question_OptionListQuery;

    public OptionDao(DaoConfig config) {
        super(config);
    }
    
    public OptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"options\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"option_text\" TEXT," + // 1: optionText
                "\"question_id\" INTEGER," + // 2: questionId
                "\"is_correct\" INTEGER NOT NULL ," + // 3: isCorrect
                "\"created_at\" TEXT," + // 4: createdAt
                "\"updated_at\" TEXT);"); // 5: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"options\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Option entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String optionText = entity.getOptionText();
        if (optionText != null) {
            stmt.bindString(2, optionText);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(3, questionId);
        }
        stmt.bindLong(4, entity.getIsCorrect() ? 1L: 0L);
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(5, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(6, updatedAt);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Option entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String optionText = entity.getOptionText();
        if (optionText != null) {
            stmt.bindString(2, optionText);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(3, questionId);
        }
        stmt.bindLong(4, entity.getIsCorrect() ? 1L: 0L);
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(5, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(6, updatedAt);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Option readEntity(Cursor cursor, int offset) {
        Option entity = new Option( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // optionText
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // questionId
            cursor.getShort(offset + 3) != 0, // isCorrect
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createdAt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // updatedAt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Option entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOptionText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuestionId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIsCorrect(cursor.getShort(offset + 3) != 0);
        entity.setCreatedAt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdatedAt(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Option entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Option entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Option entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "optionList" to-many relationship of Question. */
    public List<Option> _queryQuestion_OptionList(Long questionId) {
        synchronized (this) {
            if (question_OptionListQuery == null) {
                QueryBuilder<Option> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QuestionId.eq(null));
                question_OptionListQuery = queryBuilder.build();
            }
        }
        Query<Option> query = question_OptionListQuery.forCurrentThread();
        query.setParameter(0, questionId);
        return query.list();
    }

}
